"""FoML Expt-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WhNyYvICVFMhyUb5jT_wPGwlr-opKoGV

# **Installing the necessary packages**
"""

# pip install pandas matplotlib seaborn numpy

"""# **Imports**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""# **Creating the data frame**"""

df = pd.read_csv("/content/sample_data/Iris.csv")

"""# **Getting the first N rows**"""

df.head(150) # First 150 rows



"""# **Shape of the Data Frame**"""

df.shape

"""# **Univariate**

## Univariate for Sepal Width
"""

df_Setosa = df.loc[df['Species'] == 'Iris-setosa'] # Gives only the row belonging to Setosa
df_Virginica = df.loc[df['Species'] == 'Iris-virginica'] # Gives only the row belonging to Virginica
df_Versicolor = df.loc[df['Species'] == 'Iris-versicolor'] # Gives only the row belonging to Versicolor

# Plots the values of sepal width on the x-axis, all aligned at y=0
plt.scatter(df_Setosa['SepalWidthCm'], np.zeros_like(df_Setosa['SepalWidthCm']))
    # Selects the column SepalWidthCm | Creates an array of zeros, same length as the number of Setosa rows.
plt.scatter(df_Virginica['SepalWidthCm'], np.zeros_like(df_Virginica['SepalWidthCm']))
plt.scatter(df_Versicolor['SepalWidthCm'], np.zeros_like(df_Versicolor['SepalWidthCm']))
# Adds a label under X-axis
plt.xlabel('SepalWidthCm')
# Displaying the Plot
plt.show()

"""## Univariate for Sepal Length"""

df_Setosa = df.loc[df['Species'] == 'Iris-setosa']     # Gives only the rows belonging to Setosa
df_Virginica = df.loc[df['Species'] == 'Iris-virginica'] # Gives only the rows belonging to Virginica
df_Versicolor = df.loc[df['Species'] == 'Iris-versicolor'] # Gives only the rows belonging to Versicolor

# Plots the values of sepal length on the x-axis, all aligned at y=0
plt.scatter(df_Setosa['SepalLengthCm'], np.zeros_like(df_Setosa['SepalLengthCm']))
    # Selects the column SepalLengthCm | Creates an array of zeros, same length as the number of Setosa rows.
plt.scatter(df_Virginica['SepalLengthCm'], np.zeros_like(df_Virginica['SepalLengthCm']))
plt.scatter(df_Versicolor['SepalLengthCm'], np.zeros_like(df_Versicolor['SepalLengthCm']))
# Adds a label under X-axis
plt.xlabel('SepalLengthCm')
# Displaying the Plot
plt.show()

"""## Univariate for Petal Width"""

df_Setosa = df.loc[df['Species'] == 'Iris-setosa']       # Gives only the rows belonging to Setosa
df_Virginica = df.loc[df['Species'] == 'Iris-virginica'] # Gives only the rows belonging to Virginica
df_Versicolor = df.loc[df['Species'] == 'Iris-versicolor'] # Gives only the rows belonging to Versicolor

# Plots the values of petal width on the x-axis, all aligned at y=0
plt.scatter(df_Setosa['PetalWidthCm'], np.zeros_like(df_Setosa['PetalWidthCm']))
    # Selects the column PetalWidthCm | Creates an array of zeros, same length as the number of Setosa rows.
plt.scatter(df_Virginica['PetalWidthCm'], np.zeros_like(df_Virginica['PetalWidthCm']))
plt.scatter(df_Versicolor['PetalWidthCm'], np.zeros_like(df_Versicolor['PetalWidthCm']))
# Adds a label under X-axis
plt.xlabel('PetalWidthCm')
# Displaying the Plot
plt.show()

"""## Univariate for Petal Length"""

df_Setosa = df.loc[df['Species'] == 'Iris-setosa']       # Gives only the rows belonging to Setosa
df_Virginica = df.loc[df['Species'] == 'Iris-virginica'] # Gives only the rows belonging to Virginica
df_Versicolor = df.loc[df['Species'] == 'Iris-versicolor'] # Gives only the rows belonging to Versicolor

# Plots the values of petal length on the x-axis, all aligned at y=0
plt.scatter(df_Setosa['PetalLengthCm'], np.zeros_like(df_Setosa['PetalLengthCm']))
    # Selects the column PetalLengthCm | Creates an array of zeros, same length as the number of Setosa rows.
plt.scatter(df_Virginica['PetalLengthCm'], np.zeros_like(df_Virginica['PetalLengthCm']))
plt.scatter(df_Versicolor['PetalLengthCm'], np.zeros_like(df_Versicolor['PetalLengthCm']))
# Adds a label under X-axis
plt.xlabel('PetalLengthCm')
# Displaying the Plot
plt.show()

"""# **Bivariate**

## Bivariate for Sepal Width vs Petal Width

FacetGrid: A FacetGrid in Seaborn is a special object that lets you create a grid of subplots based on categories in your dataset.
"""

# Creates a FacetGrid, which allows plotting by grouping data based on 'Species'
sns.FacetGrid(df, hue='Species', height=5) \
   .map(plt.scatter, "SepalWidthCm", "PetalWidthCm") \
   .add_legend()
    # Plots SepalWidthCm on the X-axis and PetalWidthCm on the Y-axis
    # hue='Species' ensures each species gets a different color
    # add_legend() adds a legend to identify which color corresponds to which species

# Displaying the Plot
plt.show()

"""## Bivariate for Sepal Length vs Petal Length"""

# Creates a FacetGrid, which allows plotting by grouping data based on 'Species'
sns.FacetGrid(df, hue='Species', height=5) \
   .map(plt.scatter, "SepalLengthCm", "PetalLengthCm") \
   .add_legend()
    # Plots SepalLengthCm on the X-axis and PetalLengthCm on the Y-axis
    # hue='Species' ensures each species gets a different color
    # add_legend() adds a legend to identify which color corresponds to which species

# Displaying the Plot
plt.show()

"""# **Multivariate**

## Multivariate all the features

**What is feature?**
> A feature is just a piece of information (a detail) about something in your dataset.
"""

# Creates a pairplot which plots pairwise relationships between all numerical columns in the dataset
sns.pairplot(df, hue="Species", height=2)
    # hue="Species" colors the points according to species (Setosa, Versicolor, Virginica)
    # height=2 sets the size of each subplot
    # Each scatter plot shows the relationship between two features
    # The diagonal shows distribution plots (histograms) for each feature

# Displaying the Plot
plt.show()
